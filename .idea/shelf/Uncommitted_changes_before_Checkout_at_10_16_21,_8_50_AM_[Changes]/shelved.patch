Index: main.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.c b/main.c
--- a/main.c	(revision f4f25bdb3c9d22c488aab2dbcc4fa206ff7ecc75)
+++ b/main.c	(date 1634367015786)
@@ -1,0 +1,15 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <string.h>
+#include <assert.h>
+#include "tests.h"
+
+
+
+int main(int argc, char** argv) {
+    //testStack();
+    //testQueue();
+    testArraylist();
+}
+
Index: array_list.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include <stdio.h>\n#include <stdlib.h>\n#include <Array_list.h>\n\n/* *\n * @bref Init Array liste\n */\nvoid array_init_array_list(Array_list *l){\n    l->index=0;\n}\n\n/* *\n * @brief Insérer la valeur à la position\n * @param l : Array qui recevra la valeur\n * @param position : Position ou inserer\n * @param value : Valeur à ajouter\n */\nvoid array_insert_at(Array_list *l, int position, float value){\n    if (position > l->index){\n        array_add(l, value);\n    }\n    else{\n        for (int i = l->index; i >= position; i--)\n        {\n            l->data[i + 1] = l->data[i];\n        }\n        l->data[position] = value;\n        l->index++;\n    }\n}\n\n/* *\n * @brief Ajout de la valeur au tableau\n * @param l : Liste des tableaux\n * @param value : valeur à ajouter\n */\nvoid array_add(Array_list *l, float value){\n    l->data[l->index] = value;\n    l->index++;\n}\n\n/* *\n * @brief Supprimer la valeur à la position\n * @param l : liste de tableaux\n * @param position : Supprimer la valeur position\n */\nfloat array_remove_at(Array_list *l, int position){\n    float temp = l->data[position];\n    for (int i = position; i < l->index; i++){\n        l->data[i] = l->data[i + 1];\n    }\n    l->index--;\n    return temp;\n}\n\n/* *\n * @bref Recuperer la valeur\n * @param l : liste de tableaux\n * @param position : Index de la valeur à retourner\n */\nfloat array_get_at(Array_list *l,int position){\n    return l->data[position];\n}\n\n/* *\n * @brief Effacer la liste des tableaux\n * @param l : Liste des tableaux à effacer\n */\nvoid array_clear(Array_list *l){\n    array_init_array_list(l);\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/array_list.c b/array_list.c
--- a/array_list.c	(revision f4f25bdb3c9d22c488aab2dbcc4fa206ff7ecc75)
+++ b/array_list.c	(date 1634367015814)
@@ -1,6 +1,6 @@
 #include <stdio.h>
 #include <stdlib.h>
-#include <Array_list.h>
+#include <array_list.h>
 
 /* *
  * @bref Init Array liste
Index: heap.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include <stdbool.h>\n\n#ifndef HEAP_H\n#define HEAP_H\n\n\n#define HEAP_MAX_SIZE 100\n\ntypedef struct {\n    float data[HEAP_MAX_SIZE];\n    int index;\n} Heap;\n\n\n#endif /* HEAP_H */\n\nvoid init_heap(Heap *h);\nbool is_heap_empty(Heap *h);\nfloat pop(Heap *h); //pop the root value\nvoid push(Heap *h, float value);\nfloat replace(Heap *h, float value); // pop root and push a new key.\nfloat peek(Heap *h); // return root value but dont remove it\n\n//En option\nvoid heapify(Heap *s, float array[], size_t array_size); //create Heap from array\nvoid merge(Heap *dest, Heap *src); //merge src into dest\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/heap.h b/heap.h
--- a/heap.h	(revision f4f25bdb3c9d22c488aab2dbcc4fa206ff7ecc75)
+++ b/heap.h	(date 1634367020146)
@@ -1,4 +1,5 @@
 #include <stdbool.h>
+#include <conio.h>
 
 #ifndef HEAP_H
 #define HEAP_H
@@ -16,13 +17,13 @@
 
 void init_heap(Heap *h);
 bool is_heap_empty(Heap *h);
-float pop(Heap *h); //pop the root value
-void push(Heap *h, float value);
-float replace(Heap *h, float value); // pop root and push a new key.
-float peek(Heap *h); // return root value but dont remove it
+float pop_heap(Heap *h); //pop the root value
+void push_heap(Heap *h, float value);
+float replace(Heap *h, float value); // pop root and replace with a new value.
+float peek_heap(Heap *h); // return root value but don’t remove it
+void clear_heap(Heap *h);
 
 //En option
 void heapify(Heap *s, float array[], size_t array_size); //create Heap from array
 void merge(Heap *dest, Heap *src); //merge src into dest
 
-
